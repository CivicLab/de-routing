<?php

    require 'config.php';
    require 'Slim/Slim.php';
    \Slim\Slim::registerAutoloader();

    $app = new \Slim\Slim();

    
        
    //get routes
    $app->get('/explorations/', 'getExplorations');
    $app->get('/explorations/:id', 'getExploration');
    $app->get('/records/', function() use ($app) {
        $req = $app->request->params('exploration_id');
        getRecords($req); 
    });
    $app->get('/records/:arg', 'getRecord');

    //post routes
    $app->post('/records/create/', 'createRecord');

    $app->run();

    
    /* Exploration Methods */

    function getExploration($arg) {
        try {
            $db = getConnection();
            $stmt = $db->prepare("SELECT * FROM ".DB_TABLE_EXPLORATIONS." WHERE id = :id");
            $stmt->execute(array(':id' => $arg));$result = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $db = null;
            _convertJsonColumns($result,array('json'));
            _sendData($result,true);
        } catch(PDOException $e) {
            _sendData(array( "error" => $e->getMessage() ),false,500); 
        }
    }

    function getExplorations() {
        try {
            $db = getConnection();
            $stmt = $db->query("SELECT * FROM ".DB_TABLE_EXPLORATIONS." WHERE visible = 1 ORDER BY created_time");
            $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $db = null;
            _convertJsonColumns($result,array('json'));
            _sendData($result);
        } catch(PDOException $e) {
            _sendData(array( "error" => $e->getMessage() ),false,500); 
        }
    }

    /* Record Methods */

    function getRecord($arg) {
        try {
            $db = getConnection();
            $stmt = $db->prepare("SELECT * FROM ".DB_TABLE_RECORDS." WHERE id = :id");
            $stmt->execute(array('id' => $arg));
            
            $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $db = null;
            _convertJsonColumns($result,array('tasks','route','area'));

            // attach file paths
            foreach($result as $row)
                if (!empty($row['tasks']))
                    _attachUrl($row['tasks'],$row['id']);

            _sendData($result,true);
        } catch(PDOException $e) {
            _sendData(array( "error" => $e->getMessage() ),false,500); 
        }
    }

    function getRecords($arg = null) {
        try {
            $db = getConnection();
            if ($arg != null) {
                $stmt = $db->prepare("SELECT * FROM ".DB_TABLE_RECORDS." WHERE exploration_id = :exploration_id AND submitted = 1");
                $stmt->execute(array('exploration_id' => $arg));
            } else
                _sendData();
            
            $result = $stmt->fetchAll(PDO::FETCH_ASSOC);
            $db = null;
            _convertJsonColumns($result,array('tasks','route','area'));

            // attach file paths
            foreach($result as $row)
                if (!empty($row['tasks']))
                    _attachUrl($row['tasks'],$row['id']);
            
            _sendData($result);
        } catch(PDOException $e) {
            _sendData(array( "error" => $e->getMessage() ),false,500); 
        }
    }

    function createRecord() {
        try {
            // get and decode JSON request body
            $app = \Slim\Slim::getInstance();
            $request = $app->request();
            $record = json_decode($request->post('record'));

            //check if record already exists, if not create it in the database
            $db = getConnection();
            $stmt = $db->prepare("INSERT IGNORE INTO ".DB_TABLE_RECORDS." 
                (id,exploration_id,explorer,completed,submitted,tasks,route)
                VALUES (:id,:exploration_id,:explorer,:completed,:submitted,:tasks,:route)");
            //$stmt = $db->prepare("SELECT * FROM ".DB_TABLE_RECORDS." WHERE submitted = 1");
            
            $record = get_object_vars($record);
            //print_r(serialize($record['tasks']));
            $stmt->execute(array(
                "id" => $record['id'],
                "exploration_id" => $record['exploration_id'],
                "explorer" => $record['explorer'],
                "completed" => $record['completed'],
                "submitted" => $record['submitted'],
                "tasks" => _formatJson($db,$record['tasks']),
                "route" => _formatJson($db,$record['route'])
            ));

            //check which files need to be uploaded

            //tell app which files need to be uploaded

            _sendData($record);
        } catch (PDOException $e) {
            //print_r($e->getMessage());
            _sendData(array( "error" => $e->getMessage() ),false,500); 
        }
    }

    function uploadRecordFile() {
        //check if entry already exists in database

        //check if file already exists

        //copy file to folder

        //tell app if everything is uploaded or if more files are needed to be uploaded
    }

    /* Helper Methods */

    function _convertJsonColumns(&$data,$columns) {
        foreach($data as $key => &$row) {
            foreach($columns as $col)
                $row[$col] = json_decode($row[$col]);
                //echo stripslashes($row[$col]);
        }
    }

    function _formatJson($pdo,$string) {
       //return $pdo->quote(json_encode($string));
        return json_encode($string);
    }

    function _attachUrl($array,$record_id) {

        foreach ($array as $key => &$value) {

            if (is_array($value) || is_object($value))
                _attachUrl($value,$record_id);
            else if ($key === 'fileName') {
                $value = DIR_RECORD_URL.$record_id.'/'.$value;
                
            }
        }
    }

    //sends a message with the data
    function _sendData($data = array(), $onlyFirst = false, $status = 200) {
        // headers for not caching the results
        header('Cache-Control: no-cache, must-revalidate');
        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');

        // allow all requests
        header("Access-Control-Allow-Orgin: *");
        header("Access-Control-Allow-Methods: *");

        // headers to tell that result is JSON
        header('Content-type: application/json');

        //send status
        header("HTTP/1.1 " . $status . " " . _requestStatus($status));

        // send the result now
        if ($onlyFirst && !empty($data))
            echo json_encode($data[0]);
        else
            echo json_encode($data);

        //end script
        exit(); 
    }

    function _requestStatus($code) {
        $status = array(  
            200 => 'OK',
            404 => 'Not Found',   
            405 => 'Method Not Allowed',
            500 => 'Internal Server Error',
        ); 
        return ($status[$code])?$status[$code]:$status[500]; 
    }

    function getConnection() {
        $dbhost=DB_SERVER;
        $dbuser=DB_USER;
        $dbpass=DB_PASSWORD;
        $dbname=DB_DATABASE;
        $dbh = new PDO("mysql:host=$dbhost;dbname=$dbname", $dbuser, $dbpass);  
        $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        return $dbh;
    }
